RELEASE: Shovel-0.0.1
  1. DONE: Optparse arguments
  2. DONE: recipes!
  3. DONE: fix the plugin namespace
  4. Clean up plugins


key: [ ] not done, broken [B], [/] partial, [D] to be deleted/removed, [x] done, working and has test 

core cleanup/documentation status:
    [x] core/api
    [/] core/configurator
    [x] core/debug
    [/] core/dependencies
    [/] core/exceptions
    [/] core/features
    [x] core/file
    [/] core/loader
    [x] core/plugin
    [x] core/recipe
    [x] core/shovel
    [D] core/singleton
    [/] core/type
    [/] core/utils


plugin status:
    [ ]python/distutils
    [ ]python/nosetests
    [ ]python/pyflakes
    [ ]python/pylint
    [ ]python/unittest

    [ ]rcs/bzr
    [ ]rcs/cvs
    [ ]rcs/git
    [ ]rcs/hg
    [/]rcs/svn
    
    [/]sys/builder
    [B]sys/chroot
    [ ]sys/downloader
    [ ]sys/extractor
    [ ]sys/patcher
    [D]sys/pbuilder
    [ ]sys/systools

recipe status:
    [ ] cbuilder
    [ ] commit
    [ ] test       
        
         

 All:
     1. Get all the code to follow the 80 character line limit
     2. More comments!
     [/]3. Write more tests!
 
 Shovel Core:
     [x]1. Write a class to take over for lots of if's on argv input

     [x]2. Remove the actual parsing from this class, seperate it so that 
        it is easier to update


     [0.1.0] 4. String parsing ie. {d:sandbox} or {d:sandbox:build:ffmpeg} or {i:os}
        or {b:pre.flight:ffmpeg:link}

        where:
          {d:xxx} is directory
          {i:xxx} is an internal variable
          {b:xxx} is a dirt block
          {py:python_script_loc}

     5. Parser templates

      where:
        {d:xxx} is directory
        {i:xxx} is an internal variable
        {b:xxx} is a dirt block
        {r:xxx} is a requirement (use)
        <tab:x> where x is the tab count
    
        {i:os}:
        <tab:1>{b:builder}:
        <tab:2>  {b:package}:
        <tab:3>    {b:feature}:
        <tab:4>      {r:use}
        <tab:4>      {xxx}
        <tab:1>{b:build}:
        <tab:2>  {b:language}:
        <tab:3>    {r:use}
        <tab:3>    {xxx}
        <tab:1>{b:dist}:
        <tab:2>  {b:feature}:
        <tab:3>    {r:use}
        <tab:3>    {xxx}
        

 Plugins:
     [x] 1. So the plugin loader will recurse the directory
            and load all of the plugins.
      Requires class instance ->
     [x] 2. Then a function will pass over each class and use __dict__
            to determine the functions and will add to the configurator
     [x] 3. Support better namespacing and inheritance for the plugin names
 Downloader:
     [x] 1. Progress bar for urllib

 Patcher:
     [x] 1. Actually get this to work
     [0.1.0] 2. I would like to have it automatically figure out the strip by aligning
        the directories up (this really is doable)

 Builder:
     [0.1.0]1. Find a more elegant way for stderr to be run
     [x] 2. Support options to enable/disable the parsing of gcc


 Utils:
     [/] 1. Get pprint to multiline print properly
     [x] 2. Consolidate all of the terminal utilities here

